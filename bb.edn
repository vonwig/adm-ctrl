{:min-bb-version "0.3.7"
 :paths ["scripts"]
 :deps {slimslenderslacks/bb-util {:local/root "/Users/slim/slimslenderslacks/bb-util"}
        lread/status-line {:git/url "https://github.com/lread/status-line.git"
                           :sha "35ed39645038e81b42cb15ed6753b8462e60a06d"}}
 :tasks {:requires [[clojure.string :as string]
                    [lread.status-line :as status]
                    [babashka.process :as p]
                    [babashka.fs :as fs]
                    [clojure.tools.cli :as cli]
                    [tasks :as git]]
         :init (do (def cli-opts (cli/parse-opts *command-line-args* [["-m" "--message MESSSAGE" ""]
                                                                      [nil "--skip-clean-check" "run anyway"]
                                                                      [nil "--context context" "kube context"]]))
                   (def kube-config-context (-> cli-opts :options :context)))
         :enter (let [{:keys [name]} (current-task)] (status/line :head "TASK %s %s" name (string/join " " *command-line-args*)))
         :leave (let [{:keys [name]} (current-task)] (status/line :detail "\nTASK %s done." name))

         commit (git/recommit-any-updates (-> cli-opts :options :message))
         next-version (println (git/next-tag))

         clean? {:task (if (and (not (-> cli-opts :options :skip-clean-check)) (not (git/clean?)))
                         (throw (ex-info "dirty working copy. stop" {})))}
         tag {:task (shell (format "git tag %s" (git/next-tag)))}
         ;; requires the jib tool to be installed
         build-image {:depends [clean?]
                      :task (when (or
                                   (seq (fs/modified-since "target/app.jar" (fs/glob "src" "**.clj")))
                                   (seq (fs/modified-since "target/app.jar" (fs/glob "." "deps.edn")))
                                   (seq (fs/modified-since "target/app.jar" (fs/glob "." "jib.edn"))))
                              (clojure "-Tjib" "build" ":tag" (git/describe)))}
         build-pkcs-create-iamge {:task (shell "docker build -t atomist/pkcs-create -f docker/Dockerfile .")}
         push-pkcs-create-iamge {:task (shell {:env {"DOCKER_CONFIG" ".docker"}} "docker push atomist/pkcs-create")}
         -k8-edit {:depends [build-image]
                   :task (shell {:dir "resources/k8s/controller"} (format "kustomize edit set image atomist/adm-ctrl:%s" (git/describe)))}
         -k8-edit-for-release {:task (shell {:dir "resources/k8s/controller"}
                                            (format "kustomize edit set image atomist/adm-ctrl:%s" (git/next-tag)))}
         context (shell (if kube-config-context
                          (format "kubectl config use-context %s" kube-config-context)
                          (throw (ex-info "needs --context" {}))))
         deploy-controller {:depends [context #_build-image]
                            :task (-> (p/process "kustomize build ." {:dir (format "resources/k8s/overlays/%s" kube-config-context)})
                                      (p/process "envsubst" {:extra-env {"GIT_DESCRIBE" (git/describe)}})
                                      (p/process "kubectl apply -f -" {:out :string})
                                      deref
                                      :out
                                      (println))}
         undeploy-controller {:task (-> (p/process "kustomize build ." {:dir (format "resources/k8s/overlays/%s" kube-config-context)})
                                        (p/process "kubectl apply -f -" {:out :string})
                                        deref
                                        :out
                                        (println))}
         deploy-nginx-controller {:depends [context]
                                  :task (-> (p/process "k apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml")
                                            deref
                                            :out
                                            println)}
         ;; kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml
         helm-deploy-nginx-controller {:depends [context]
                                       :task (p/process "helm upgrade --install ingress-nginx ingress-nginx --repo https://kubernetes.github.io/ingress-nginx --namespace ingress-nginx --create-namespace")}
         helm-undeploy-nginx-controller {:task (p/process "helm uninstall ingress-nginx --namespace ingress-nginx")}
         install-dashboard {:depends [context]
                            :task (do
                                    (shell "k apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml")
                                    (shell "k patch deployment kubernetes-dashboard -n kubernetes-dashboard --type 'json' -p '[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--enable-skip-login\"}]'"))}
         ;; http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
         ;; after running `k proxy`
         delete-dashboard {:depends [context]
                           :task (shell "k delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml")}
         add-ingress {:depends [context]
                      :task (shell "k create ingress dockerhub-eks-clj-web --class=nginx --rule=localhost/clj1(/|$)(.*)=dockerhub-eks-clj-web:8080 --annotation nginx.ingress.kubernetes.io/rewrite-target=/$2 -n production")}
         port-forward-to-dockerhub-eks-clj-web (shell "k port-forward deployment/dockerhub-eks-clj-web 3000:3000 -n production")
         test-dockerhub-eks-clj-web (shell "curl http://localhost:3000")
         bump-dockerhub-eks-clj-web (shell {:dir "/Users/slim/vonwig/dockerhub-eks-clj-web"}
                                           (format "bb deploy --message \"bump\" --context %s" kube-config-context))
         undelete-dockerhub-eks-clj-web (shell {:dir "/Users/slim/vonwig/dockerhub-eks-clj-web"}
                                               (format "bb undeploy --context %s" kube-config-context))
         get-docker-eks-clj-web-tag (shell {:dir "/Users/slim/vonwig/dockerhub-eks-clj-web"} "git describe --tags")
         admission {:depends [context]
                    :task (-> (p/process "kustomize build resources/k8s/admission")
                              (p/process "kubectl apply -f -" {:out :string :err :string})
                              deref
                              ((fn [{:keys [out err]}] (println out) (println err))))}
         release {:depends [clean? -k8-edit-for-release commit tag build-image]}}}
